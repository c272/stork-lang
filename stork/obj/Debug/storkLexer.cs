//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:\Files\Programming\GitHub\stork\stork\stork.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace stork {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class storkLexer : Lexer {
	public const int
		INTEGER=1, FLOAT=2, BOOLEAN=3, STRING=4, ADD_OP=5, TAKE_OP=6, MUL_OP=7, 
		DIV_OP=8, EQUALS_OP=9, GREATER_OR_EQUALS_OP=10, LESS_OR_EQUALS_OP=11, 
		GREATER_OP=12, LESS_OP=13, INCREMENT_POSTFIX_OP=14, DECREMENT_POSTFIX_OP=15, 
		ADDTO_OP=16, TAKEFROM_OP=17, POINT=18, ENDLINE=19, COMMA=20, QUOTE=21, 
		LBRACKET=22, RBRACKET=23, LBRACE=24, RBRACE=25, EQUALS=26, FUNCDEF_SYM=27, 
		IF_SYM=28, ELSE_SYM=29, STATIC_SYM=30, CLASS_SYM=31, CONSTRUCTOR_SYM=32, 
		RETURN_SYM=33, IDENTIFIER=34, COMMENT=35, WS=36, UNKNOWN_SYMBOL=37;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"INTEGER", "FLOAT", "BOOLEAN", "STRING", "ADD_OP", "TAKE_OP", "MUL_OP", 
		"DIV_OP", "EQUALS_OP", "GREATER_OR_EQUALS_OP", "LESS_OR_EQUALS_OP", "GREATER_OP", 
		"LESS_OP", "INCREMENT_POSTFIX_OP", "DECREMENT_POSTFIX_OP", "ADDTO_OP", 
		"TAKEFROM_OP", "POINT", "ENDLINE", "COMMA", "QUOTE", "LBRACKET", "RBRACKET", 
		"LBRACE", "RBRACE", "EQUALS", "FUNCDEF_SYM", "IF_SYM", "ELSE_SYM", "STATIC_SYM", 
		"CLASS_SYM", "CONSTRUCTOR_SYM", "RETURN_SYM", "IDENTIFIER", "COMMENT", 
		"WS", "UNKNOWN_SYMBOL"
	};


	public storkLexer(ICharStream input)
		: base(input)
	{
		_interp = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, "'+'", "'-'", "'*'", "'/'", "'=='", "'>='", 
		"'<='", "'>'", "'<'", "'++'", "'--'", "'+='", "'-='", "'.'", "';'", "','", 
		"'\"'", "'('", "')'", "'{'", "'}'", "'='", "'func'", "'if'", "'else'", 
		"'static'", "'class'", "'construct'", "'return'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "INTEGER", "FLOAT", "BOOLEAN", "STRING", "ADD_OP", "TAKE_OP", "MUL_OP", 
		"DIV_OP", "EQUALS_OP", "GREATER_OR_EQUALS_OP", "LESS_OR_EQUALS_OP", "GREATER_OP", 
		"LESS_OP", "INCREMENT_POSTFIX_OP", "DECREMENT_POSTFIX_OP", "ADDTO_OP", 
		"TAKEFROM_OP", "POINT", "ENDLINE", "COMMA", "QUOTE", "LBRACKET", "RBRACKET", 
		"LBRACE", "RBRACE", "EQUALS", "FUNCDEF_SYM", "IF_SYM", "ELSE_SYM", "STATIC_SYM", 
		"CLASS_SYM", "CONSTRUCTOR_SYM", "RETURN_SYM", "IDENTIFIER", "COMMENT", 
		"WS", "UNKNOWN_SYMBOL"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "stork.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x2\'\xE7\b\x1\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x3\x2\x3\x2\a\x2P\n\x2\f\x2\xE"+
		"\x2S\v\x2\x3\x2\x5\x2V\n\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3\x4\x3\x4\x3\x4"+
		"\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x5\x4\x65\n\x4\x3\x5\x3\x5\a\x5i"+
		"\n\x5\f\x5\xE\x5l\v\x5\x3\x5\x3\x5\x3\x6\x3\x6\x3\a\x3\a\x3\b\x3\b\x3"+
		"\t\x3\t\x3\n\x3\n\x3\n\x3\v\x3\v\x3\v\x3\f\x3\f\x3\f\x3\r\x3\r\x3\xE\x3"+
		"\xE\x3\xF\x3\xF\x3\xF\x3\x10\x3\x10\x3\x10\x3\x11\x3\x11\x3\x11\x3\x12"+
		"\x3\x12\x3\x12\x3\x13\x3\x13\x3\x14\x3\x14\x3\x15\x3\x15\x3\x16\x3\x16"+
		"\x3\x17\x3\x17\x3\x18\x3\x18\x3\x19\x3\x19\x3\x1A\x3\x1A\x3\x1B\x3\x1B"+
		"\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1D\x3\x1D\x3\x1D\x3\x1E\x3\x1E"+
		"\x3\x1E\x3\x1E\x3\x1E\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F"+
		"\x3 \x3 \x3 \x3 \x3 \x3 \x3!\x3!\x3!\x3!\x3!\x3!\x3!\x3!\x3!\x3!\x3\""+
		"\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3#\x3#\a#\xD0\n#\f#\xE#\xD3\v#\x3$\x3"+
		"$\x3$\x3$\a$\xD9\n$\f$\xE$\xDC\v$\x3$\x3$\x3$\x3$\x3%\x3%\x3%\x3%\x3&"+
		"\x3&\x2\x2\x2\'\x3\x2\x3\x5\x2\x4\a\x2\x5\t\x2\x6\v\x2\a\r\x2\b\xF\x2"+
		"\t\x11\x2\n\x13\x2\v\x15\x2\f\x17\x2\r\x19\x2\xE\x1B\x2\xF\x1D\x2\x10"+
		"\x1F\x2\x11!\x2\x12#\x2\x13%\x2\x14\'\x2\x15)\x2\x16+\x2\x17-\x2\x18/"+
		"\x2\x19\x31\x2\x1A\x33\x2\x1B\x35\x2\x1C\x37\x2\x1D\x39\x2\x1E;\x2\x1F"+
		"=\x2 ?\x2!\x41\x2\"\x43\x2#\x45\x2$G\x2%I\x2&K\x2\'\x3\x2\t\x3\x2\x33"+
		";\x3\x2\x32;\x3\x2$$\x5\x2\x43\\\x61\x61\x63|\x6\x2\x32;\x43\\\x61\x61"+
		"\x63|\x3\x2\f\f\x5\x2\v\f\xF\xF\"\"\xEC\x2\x3\x3\x2\x2\x2\x2\x5\x3\x2"+
		"\x2\x2\x2\a\x3\x2\x2\x2\x2\t\x3\x2\x2\x2\x2\v\x3\x2\x2\x2\x2\r\x3\x2\x2"+
		"\x2\x2\xF\x3\x2\x2\x2\x2\x11\x3\x2\x2\x2\x2\x13\x3\x2\x2\x2\x2\x15\x3"+
		"\x2\x2\x2\x2\x17\x3\x2\x2\x2\x2\x19\x3\x2\x2\x2\x2\x1B\x3\x2\x2\x2\x2"+
		"\x1D\x3\x2\x2\x2\x2\x1F\x3\x2\x2\x2\x2!\x3\x2\x2\x2\x2#\x3\x2\x2\x2\x2"+
		"%\x3\x2\x2\x2\x2\'\x3\x2\x2\x2\x2)\x3\x2\x2\x2\x2+\x3\x2\x2\x2\x2-\x3"+
		"\x2\x2\x2\x2/\x3\x2\x2\x2\x2\x31\x3\x2\x2\x2\x2\x33\x3\x2\x2\x2\x2\x35"+
		"\x3\x2\x2\x2\x2\x37\x3\x2\x2\x2\x2\x39\x3\x2\x2\x2\x2;\x3\x2\x2\x2\x2"+
		"=\x3\x2\x2\x2\x2?\x3\x2\x2\x2\x2\x41\x3\x2\x2\x2\x2\x43\x3\x2\x2\x2\x2"+
		"\x45\x3\x2\x2\x2\x2G\x3\x2\x2\x2\x2I\x3\x2\x2\x2\x2K\x3\x2\x2\x2\x3U\x3"+
		"\x2\x2\x2\x5W\x3\x2\x2\x2\a\x64\x3\x2\x2\x2\t\x66\x3\x2\x2\x2\vo\x3\x2"+
		"\x2\x2\rq\x3\x2\x2\x2\xFs\x3\x2\x2\x2\x11u\x3\x2\x2\x2\x13w\x3\x2\x2\x2"+
		"\x15z\x3\x2\x2\x2\x17}\x3\x2\x2\x2\x19\x80\x3\x2\x2\x2\x1B\x82\x3\x2\x2"+
		"\x2\x1D\x84\x3\x2\x2\x2\x1F\x87\x3\x2\x2\x2!\x8A\x3\x2\x2\x2#\x8D\x3\x2"+
		"\x2\x2%\x90\x3\x2\x2\x2\'\x92\x3\x2\x2\x2)\x94\x3\x2\x2\x2+\x96\x3\x2"+
		"\x2\x2-\x98\x3\x2\x2\x2/\x9A\x3\x2\x2\x2\x31\x9C\x3\x2\x2\x2\x33\x9E\x3"+
		"\x2\x2\x2\x35\xA0\x3\x2\x2\x2\x37\xA2\x3\x2\x2\x2\x39\xA7\x3\x2\x2\x2"+
		";\xAA\x3\x2\x2\x2=\xAF\x3\x2\x2\x2?\xB6\x3\x2\x2\x2\x41\xBC\x3\x2\x2\x2"+
		"\x43\xC6\x3\x2\x2\x2\x45\xCD\x3\x2\x2\x2G\xD4\x3\x2\x2\x2I\xE1\x3\x2\x2"+
		"\x2K\xE5\x3\x2\x2\x2MQ\t\x2\x2\x2NP\t\x3\x2\x2ON\x3\x2\x2\x2PS\x3\x2\x2"+
		"\x2QO\x3\x2\x2\x2QR\x3\x2\x2\x2RV\x3\x2\x2\x2SQ\x3\x2\x2\x2TV\a\x32\x2"+
		"\x2UM\x3\x2\x2\x2UT\x3\x2\x2\x2V\x4\x3\x2\x2\x2WX\x5\x3\x2\x2XY\x5%\x13"+
		"\x2YZ\x5\x3\x2\x2Z\x6\x3\x2\x2\x2[\\\av\x2\x2\\]\at\x2\x2]^\aw\x2\x2^"+
		"\x65\ag\x2\x2_`\ah\x2\x2`\x61\a\x63\x2\x2\x61\x62\an\x2\x2\x62\x63\au"+
		"\x2\x2\x63\x65\ag\x2\x2\x64[\x3\x2\x2\x2\x64_\x3\x2\x2\x2\x65\b\x3\x2"+
		"\x2\x2\x66j\x5+\x16\x2gi\n\x4\x2\x2hg\x3\x2\x2\x2il\x3\x2\x2\x2jh\x3\x2"+
		"\x2\x2jk\x3\x2\x2\x2km\x3\x2\x2\x2lj\x3\x2\x2\x2mn\x5+\x16\x2n\n\x3\x2"+
		"\x2\x2op\a-\x2\x2p\f\x3\x2\x2\x2qr\a/\x2\x2r\xE\x3\x2\x2\x2st\a,\x2\x2"+
		"t\x10\x3\x2\x2\x2uv\a\x31\x2\x2v\x12\x3\x2\x2\x2wx\a?\x2\x2xy\a?\x2\x2"+
		"y\x14\x3\x2\x2\x2z{\a@\x2\x2{|\a?\x2\x2|\x16\x3\x2\x2\x2}~\a>\x2\x2~\x7F"+
		"\a?\x2\x2\x7F\x18\x3\x2\x2\x2\x80\x81\a@\x2\x2\x81\x1A\x3\x2\x2\x2\x82"+
		"\x83\a>\x2\x2\x83\x1C\x3\x2\x2\x2\x84\x85\a-\x2\x2\x85\x86\a-\x2\x2\x86"+
		"\x1E\x3\x2\x2\x2\x87\x88\a/\x2\x2\x88\x89\a/\x2\x2\x89 \x3\x2\x2\x2\x8A"+
		"\x8B\a-\x2\x2\x8B\x8C\a?\x2\x2\x8C\"\x3\x2\x2\x2\x8D\x8E\a/\x2\x2\x8E"+
		"\x8F\a?\x2\x2\x8F$\x3\x2\x2\x2\x90\x91\a\x30\x2\x2\x91&\x3\x2\x2\x2\x92"+
		"\x93\a=\x2\x2\x93(\x3\x2\x2\x2\x94\x95\a.\x2\x2\x95*\x3\x2\x2\x2\x96\x97"+
		"\a$\x2\x2\x97,\x3\x2\x2\x2\x98\x99\a*\x2\x2\x99.\x3\x2\x2\x2\x9A\x9B\a"+
		"+\x2\x2\x9B\x30\x3\x2\x2\x2\x9C\x9D\a}\x2\x2\x9D\x32\x3\x2\x2\x2\x9E\x9F"+
		"\a\x7F\x2\x2\x9F\x34\x3\x2\x2\x2\xA0\xA1\a?\x2\x2\xA1\x36\x3\x2\x2\x2"+
		"\xA2\xA3\ah\x2\x2\xA3\xA4\aw\x2\x2\xA4\xA5\ap\x2\x2\xA5\xA6\a\x65\x2\x2"+
		"\xA6\x38\x3\x2\x2\x2\xA7\xA8\ak\x2\x2\xA8\xA9\ah\x2\x2\xA9:\x3\x2\x2\x2"+
		"\xAA\xAB\ag\x2\x2\xAB\xAC\an\x2\x2\xAC\xAD\au\x2\x2\xAD\xAE\ag\x2\x2\xAE"+
		"<\x3\x2\x2\x2\xAF\xB0\au\x2\x2\xB0\xB1\av\x2\x2\xB1\xB2\a\x63\x2\x2\xB2"+
		"\xB3\av\x2\x2\xB3\xB4\ak\x2\x2\xB4\xB5\a\x65\x2\x2\xB5>\x3\x2\x2\x2\xB6"+
		"\xB7\a\x65\x2\x2\xB7\xB8\an\x2\x2\xB8\xB9\a\x63\x2\x2\xB9\xBA\au\x2\x2"+
		"\xBA\xBB\au\x2\x2\xBB@\x3\x2\x2\x2\xBC\xBD\a\x65\x2\x2\xBD\xBE\aq\x2\x2"+
		"\xBE\xBF\ap\x2\x2\xBF\xC0\au\x2\x2\xC0\xC1\av\x2\x2\xC1\xC2\at\x2\x2\xC2"+
		"\xC3\aw\x2\x2\xC3\xC4\a\x65\x2\x2\xC4\xC5\av\x2\x2\xC5\x42\x3\x2\x2\x2"+
		"\xC6\xC7\at\x2\x2\xC7\xC8\ag\x2\x2\xC8\xC9\av\x2\x2\xC9\xCA\aw\x2\x2\xCA"+
		"\xCB\at\x2\x2\xCB\xCC\ap\x2\x2\xCC\x44\x3\x2\x2\x2\xCD\xD1\t\x5\x2\x2"+
		"\xCE\xD0\t\x6\x2\x2\xCF\xCE\x3\x2\x2\x2\xD0\xD3\x3\x2\x2\x2\xD1\xCF\x3"+
		"\x2\x2\x2\xD1\xD2\x3\x2\x2\x2\xD2\x46\x3\x2\x2\x2\xD3\xD1\x3\x2\x2\x2"+
		"\xD4\xD5\a\x31\x2\x2\xD5\xD6\a\x31\x2\x2\xD6\xDA\x3\x2\x2\x2\xD7\xD9\n"+
		"\a\x2\x2\xD8\xD7\x3\x2\x2\x2\xD9\xDC\x3\x2\x2\x2\xDA\xD8\x3\x2\x2\x2\xDA"+
		"\xDB\x3\x2\x2\x2\xDB\xDD\x3\x2\x2\x2\xDC\xDA\x3\x2\x2\x2\xDD\xDE\a\f\x2"+
		"\x2\xDE\xDF\x3\x2\x2\x2\xDF\xE0\b$\x2\x2\xE0H\x3\x2\x2\x2\xE1\xE2\t\b"+
		"\x2\x2\xE2\xE3\x3\x2\x2\x2\xE3\xE4\b%\x2\x2\xE4J\x3\x2\x2\x2\xE5\xE6\v"+
		"\x2\x2\x2\xE6L\x3\x2\x2\x2\t\x2QU\x64j\xD1\xDA\x3\b\x2\x2";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace stork
