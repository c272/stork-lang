//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:\Files\Programming\GitHub\stork\stork\stork.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace stork {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class storkLexer : Lexer {
	public const int
		INTEGER=1, FLOAT=2, BOOLEAN=3, STRING=4, ADD_OP=5, TAKE_OP=6, MUL_OP=7, 
		DIV_OP=8, EQUALS_OP=9, GREATER_OR_EQUALS_OP=10, LESS_OR_EQUALS_OP=11, 
		GREATER_OP=12, LESS_OP=13, INCREMENT_POSTFIX_OP=14, DECREMENT_POSTFIX_OP=15, 
		ADDTO_OP=16, TAKEFROM_OP=17, POINT=18, ENDLINE=19, COMMA=20, QUOTE=21, 
		LBRACKET=22, RBRACKET=23, LBRACE=24, RBRACE=25, EQUALS=26, IDENTIFIER=27, 
		WS=28, UNKNOWN_SYMBOL=29;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"INTEGER", "FLOAT", "BOOLEAN", "STRING", "ADD_OP", "TAKE_OP", "MUL_OP", 
		"DIV_OP", "EQUALS_OP", "GREATER_OR_EQUALS_OP", "LESS_OR_EQUALS_OP", "GREATER_OP", 
		"LESS_OP", "INCREMENT_POSTFIX_OP", "DECREMENT_POSTFIX_OP", "ADDTO_OP", 
		"TAKEFROM_OP", "POINT", "ENDLINE", "COMMA", "QUOTE", "LBRACKET", "RBRACKET", 
		"LBRACE", "RBRACE", "EQUALS", "IDENTIFIER", "WS", "UNKNOWN_SYMBOL"
	};


	public storkLexer(ICharStream input)
		: base(input)
	{
		_interp = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, "'+'", "'-'", "'*'", "'/'", "'=='", "'>='", 
		"'<='", "'>'", "'<'", "'++'", "'--'", "'+='", "'-='", "'.'", "';'", "','", 
		"'\"'", "'('", "')'", "'{'", "'}'", "'='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "INTEGER", "FLOAT", "BOOLEAN", "STRING", "ADD_OP", "TAKE_OP", "MUL_OP", 
		"DIV_OP", "EQUALS_OP", "GREATER_OR_EQUALS_OP", "LESS_OR_EQUALS_OP", "GREATER_OP", 
		"LESS_OP", "INCREMENT_POSTFIX_OP", "DECREMENT_POSTFIX_OP", "ADDTO_OP", 
		"TAKEFROM_OP", "POINT", "ENDLINE", "COMMA", "QUOTE", "LBRACKET", "RBRACKET", 
		"LBRACE", "RBRACE", "EQUALS", "IDENTIFIER", "WS", "UNKNOWN_SYMBOL"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "stork.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x2\x1F\x9F\b\x1\x4"+
		"\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b"+
		"\x4\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4"+
		"\x10\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15"+
		"\t\x15\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A"+
		"\x4\x1B\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x3\x2\x3\x2\a\x2"+
		"@\n\x2\f\x2\xE\x2\x43\v\x2\x3\x2\x5\x2\x46\n\x2\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x5\x4U\n\x4\x3"+
		"\x5\x3\x5\a\x5Y\n\x5\f\x5\xE\x5\\\v\x5\x3\x5\x3\x5\x3\x6\x3\x6\x3\a\x3"+
		"\a\x3\b\x3\b\x3\t\x3\t\x3\n\x3\n\x3\n\x3\v\x3\v\x3\v\x3\f\x3\f\x3\f\x3"+
		"\r\x3\r\x3\xE\x3\xE\x3\xF\x3\xF\x3\xF\x3\x10\x3\x10\x3\x10\x3\x11\x3\x11"+
		"\x3\x11\x3\x12\x3\x12\x3\x12\x3\x13\x3\x13\x3\x14\x3\x14\x3\x15\x3\x15"+
		"\x3\x16\x3\x16\x3\x17\x3\x17\x3\x18\x3\x18\x3\x19\x3\x19\x3\x1A\x3\x1A"+
		"\x3\x1B\x3\x1B\x3\x1C\x3\x1C\a\x1C\x95\n\x1C\f\x1C\xE\x1C\x98\v\x1C\x3"+
		"\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1E\x3\x1E\x2\x2\x2\x1F\x3\x2\x3\x5\x2\x4"+
		"\a\x2\x5\t\x2\x6\v\x2\a\r\x2\b\xF\x2\t\x11\x2\n\x13\x2\v\x15\x2\f\x17"+
		"\x2\r\x19\x2\xE\x1B\x2\xF\x1D\x2\x10\x1F\x2\x11!\x2\x12#\x2\x13%\x2\x14"+
		"\'\x2\x15)\x2\x16+\x2\x17-\x2\x18/\x2\x19\x31\x2\x1A\x33\x2\x1B\x35\x2"+
		"\x1C\x37\x2\x1D\x39\x2\x1E;\x2\x1F\x3\x2\b\x3\x2\x33;\x3\x2\x32;\x3\x2"+
		"$$\x5\x2\x43\\\x61\x61\x63|\x6\x2\x32;\x43\\\x61\x61\x63|\x4\x2\v\f\""+
		"\"\xA3\x2\x3\x3\x2\x2\x2\x2\x5\x3\x2\x2\x2\x2\a\x3\x2\x2\x2\x2\t\x3\x2"+
		"\x2\x2\x2\v\x3\x2\x2\x2\x2\r\x3\x2\x2\x2\x2\xF\x3\x2\x2\x2\x2\x11\x3\x2"+
		"\x2\x2\x2\x13\x3\x2\x2\x2\x2\x15\x3\x2\x2\x2\x2\x17\x3\x2\x2\x2\x2\x19"+
		"\x3\x2\x2\x2\x2\x1B\x3\x2\x2\x2\x2\x1D\x3\x2\x2\x2\x2\x1F\x3\x2\x2\x2"+
		"\x2!\x3\x2\x2\x2\x2#\x3\x2\x2\x2\x2%\x3\x2\x2\x2\x2\'\x3\x2\x2\x2\x2)"+
		"\x3\x2\x2\x2\x2+\x3\x2\x2\x2\x2-\x3\x2\x2\x2\x2/\x3\x2\x2\x2\x2\x31\x3"+
		"\x2\x2\x2\x2\x33\x3\x2\x2\x2\x2\x35\x3\x2\x2\x2\x2\x37\x3\x2\x2\x2\x2"+
		"\x39\x3\x2\x2\x2\x2;\x3\x2\x2\x2\x3\x45\x3\x2\x2\x2\x5G\x3\x2\x2\x2\a"+
		"T\x3\x2\x2\x2\tV\x3\x2\x2\x2\v_\x3\x2\x2\x2\r\x61\x3\x2\x2\x2\xF\x63\x3"+
		"\x2\x2\x2\x11\x65\x3\x2\x2\x2\x13g\x3\x2\x2\x2\x15j\x3\x2\x2\x2\x17m\x3"+
		"\x2\x2\x2\x19p\x3\x2\x2\x2\x1Br\x3\x2\x2\x2\x1Dt\x3\x2\x2\x2\x1Fw\x3\x2"+
		"\x2\x2!z\x3\x2\x2\x2#}\x3\x2\x2\x2%\x80\x3\x2\x2\x2\'\x82\x3\x2\x2\x2"+
		")\x84\x3\x2\x2\x2+\x86\x3\x2\x2\x2-\x88\x3\x2\x2\x2/\x8A\x3\x2\x2\x2\x31"+
		"\x8C\x3\x2\x2\x2\x33\x8E\x3\x2\x2\x2\x35\x90\x3\x2\x2\x2\x37\x92\x3\x2"+
		"\x2\x2\x39\x99\x3\x2\x2\x2;\x9D\x3\x2\x2\x2=\x41\t\x2\x2\x2>@\t\x3\x2"+
		"\x2?>\x3\x2\x2\x2@\x43\x3\x2\x2\x2\x41?\x3\x2\x2\x2\x41\x42\x3\x2\x2\x2"+
		"\x42\x46\x3\x2\x2\x2\x43\x41\x3\x2\x2\x2\x44\x46\a\x32\x2\x2\x45=\x3\x2"+
		"\x2\x2\x45\x44\x3\x2\x2\x2\x46\x4\x3\x2\x2\x2GH\x5\x3\x2\x2HI\x5%\x13"+
		"\x2IJ\x5\x3\x2\x2J\x6\x3\x2\x2\x2KL\av\x2\x2LM\at\x2\x2MN\aw\x2\x2NU\a"+
		"g\x2\x2OP\ah\x2\x2PQ\a\x63\x2\x2QR\an\x2\x2RS\au\x2\x2SU\ag\x2\x2TK\x3"+
		"\x2\x2\x2TO\x3\x2\x2\x2U\b\x3\x2\x2\x2VZ\x5+\x16\x2WY\n\x4\x2\x2XW\x3"+
		"\x2\x2\x2Y\\\x3\x2\x2\x2ZX\x3\x2\x2\x2Z[\x3\x2\x2\x2[]\x3\x2\x2\x2\\Z"+
		"\x3\x2\x2\x2]^\x5+\x16\x2^\n\x3\x2\x2\x2_`\a-\x2\x2`\f\x3\x2\x2\x2\x61"+
		"\x62\a/\x2\x2\x62\xE\x3\x2\x2\x2\x63\x64\a,\x2\x2\x64\x10\x3\x2\x2\x2"+
		"\x65\x66\a\x31\x2\x2\x66\x12\x3\x2\x2\x2gh\a?\x2\x2hi\a?\x2\x2i\x14\x3"+
		"\x2\x2\x2jk\a@\x2\x2kl\a?\x2\x2l\x16\x3\x2\x2\x2mn\a>\x2\x2no\a?\x2\x2"+
		"o\x18\x3\x2\x2\x2pq\a@\x2\x2q\x1A\x3\x2\x2\x2rs\a>\x2\x2s\x1C\x3\x2\x2"+
		"\x2tu\a-\x2\x2uv\a-\x2\x2v\x1E\x3\x2\x2\x2wx\a/\x2\x2xy\a/\x2\x2y \x3"+
		"\x2\x2\x2z{\a-\x2\x2{|\a?\x2\x2|\"\x3\x2\x2\x2}~\a/\x2\x2~\x7F\a?\x2\x2"+
		"\x7F$\x3\x2\x2\x2\x80\x81\a\x30\x2\x2\x81&\x3\x2\x2\x2\x82\x83\a=\x2\x2"+
		"\x83(\x3\x2\x2\x2\x84\x85\a.\x2\x2\x85*\x3\x2\x2\x2\x86\x87\a$\x2\x2\x87"+
		",\x3\x2\x2\x2\x88\x89\a*\x2\x2\x89.\x3\x2\x2\x2\x8A\x8B\a+\x2\x2\x8B\x30"+
		"\x3\x2\x2\x2\x8C\x8D\a}\x2\x2\x8D\x32\x3\x2\x2\x2\x8E\x8F\a\x7F\x2\x2"+
		"\x8F\x34\x3\x2\x2\x2\x90\x91\a?\x2\x2\x91\x36\x3\x2\x2\x2\x92\x96\t\x5"+
		"\x2\x2\x93\x95\t\x6\x2\x2\x94\x93\x3\x2\x2\x2\x95\x98\x3\x2\x2\x2\x96"+
		"\x94\x3\x2\x2\x2\x96\x97\x3\x2\x2\x2\x97\x38\x3\x2\x2\x2\x98\x96\x3\x2"+
		"\x2\x2\x99\x9A\t\a\x2\x2\x9A\x9B\x3\x2\x2\x2\x9B\x9C\b\x1D\x2\x2\x9C:"+
		"\x3\x2\x2\x2\x9D\x9E\v\x2\x2\x2\x9E<\x3\x2\x2\x2\b\x2\x41\x45TZ\x96\x3"+
		"\b\x2\x2";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace stork
