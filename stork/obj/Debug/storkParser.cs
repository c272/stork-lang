//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:\Files\Programming\GitHub\stork\stork\stork.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace stork {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class storkParser : Parser {
	public const int
		INTEGER=1, FLOAT=2, STRING=3, QUOTE=4, ENDLINE=5, SET_EQUALS=6, IDENTIFIER=7, 
		WS=8, UNKNOWN_SYMBOL=9;
	public const int
		RULE_compileUnit = 0, RULE_block = 1, RULE_statement = 2, RULE_stat_ass = 3, 
		RULE_value = 4;
	public static readonly string[] ruleNames = {
		"compileUnit", "block", "statement", "stat_ass", "value"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, "'\"'", "';'", "'='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "INTEGER", "FLOAT", "STRING", "QUOTE", "ENDLINE", "SET_EQUALS", 
		"IDENTIFIER", "WS", "UNKNOWN_SYMBOL"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "stork.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public storkParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class CompileUnitContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(storkParser.Eof, 0); }
		public CompileUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compileUnit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IstorkListener typedListener = listener as IstorkListener;
			if (typedListener != null) typedListener.EnterCompileUnit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IstorkListener typedListener = listener as IstorkListener;
			if (typedListener != null) typedListener.ExitCompileUnit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstorkVisitor<TResult> typedVisitor = visitor as IstorkVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompileUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompileUnitContext compileUnit() {
		CompileUnitContext _localctx = new CompileUnitContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_compileUnit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10; block();
			State = 11; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			IstorkListener typedListener = listener as IstorkListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IstorkListener typedListener = listener as IstorkListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstorkVisitor<TResult> typedVisitor = visitor as IstorkVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 16;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==IDENTIFIER) {
				{
				{
				State = 13; statement();
				}
				}
				State = 18;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public Stat_assContext stat_ass() {
			return GetRuleContext<Stat_assContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IstorkListener typedListener = listener as IstorkListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IstorkListener typedListener = listener as IstorkListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstorkVisitor<TResult> typedVisitor = visitor as IstorkVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 19; stat_ass();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_assContext : ParserRuleContext {
		public ITerminalNode[] IDENTIFIER() { return GetTokens(storkParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(storkParser.IDENTIFIER, i);
		}
		public ITerminalNode SET_EQUALS() { return GetToken(storkParser.SET_EQUALS, 0); }
		public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public ITerminalNode ENDLINE() { return GetToken(storkParser.ENDLINE, 0); }
		public Stat_assContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_ass; } }
		public override void EnterRule(IParseTreeListener listener) {
			IstorkListener typedListener = listener as IstorkListener;
			if (typedListener != null) typedListener.EnterStat_ass(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IstorkListener typedListener = listener as IstorkListener;
			if (typedListener != null) typedListener.ExitStat_ass(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstorkVisitor<TResult> typedVisitor = visitor as IstorkVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_ass(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_assContext stat_ass() {
		Stat_assContext _localctx = new Stat_assContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_stat_ass);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 21; Match(IDENTIFIER);
			State = 22; Match(IDENTIFIER);
			State = 23; Match(SET_EQUALS);
			State = 24; value();
			State = 25; Match(ENDLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		public ITerminalNode INTEGER() { return GetToken(storkParser.INTEGER, 0); }
		public ITerminalNode FLOAT() { return GetToken(storkParser.FLOAT, 0); }
		public ITerminalNode STRING() { return GetToken(storkParser.STRING, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(storkParser.IDENTIFIER, 0); }
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			IstorkListener typedListener = listener as IstorkListener;
			if (typedListener != null) typedListener.EnterValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IstorkListener typedListener = listener as IstorkListener;
			if (typedListener != null) typedListener.ExitValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstorkVisitor<TResult> typedVisitor = visitor as IstorkVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_value);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 27;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INTEGER) | (1L << FLOAT) | (1L << STRING) | (1L << IDENTIFIER))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\v \x4\x2\t\x2\x4"+
		"\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x3\x2\x3\x2\x3\x2\x3\x3\a\x3"+
		"\x11\n\x3\f\x3\xE\x3\x14\v\x3\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5"+
		"\x3\x5\x3\x6\x3\x6\x3\x6\x2\x2\x2\a\x2\x2\x4\x2\x6\x2\b\x2\n\x2\x2\x3"+
		"\x4\x2\x3\x5\t\t\x1B\x2\f\x3\x2\x2\x2\x4\x12\x3\x2\x2\x2\x6\x15\x3\x2"+
		"\x2\x2\b\x17\x3\x2\x2\x2\n\x1D\x3\x2\x2\x2\f\r\x5\x4\x3\x2\r\xE\a\x2\x2"+
		"\x3\xE\x3\x3\x2\x2\x2\xF\x11\x5\x6\x4\x2\x10\xF\x3\x2\x2\x2\x11\x14\x3"+
		"\x2\x2\x2\x12\x10\x3\x2\x2\x2\x12\x13\x3\x2\x2\x2\x13\x5\x3\x2\x2\x2\x14"+
		"\x12\x3\x2\x2\x2\x15\x16\x5\b\x5\x2\x16\a\x3\x2\x2\x2\x17\x18\a\t\x2\x2"+
		"\x18\x19\a\t\x2\x2\x19\x1A\a\b\x2\x2\x1A\x1B\x5\n\x6\x2\x1B\x1C\a\a\x2"+
		"\x2\x1C\t\x3\x2\x2\x2\x1D\x1E\t\x2\x2\x2\x1E\v\x3\x2\x2\x2\x3\x12";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace stork
