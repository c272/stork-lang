//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:\Files\Programming\GitHub\stork\stork\stork.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace stork {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class storkParser : Parser {
	public const int
		INTEGER=1, FLOAT=2, BOOLEAN=3, STRING=4, ADD_OP=5, TAKE_OP=6, MUL_OP=7, 
		DIV_OP=8, EQUALS_OP=9, GREATER_OR_EQUALS_OP=10, LESS_OR_EQUALS_OP=11, 
		GREATER_OP=12, LESS_OP=13, INCREMENT_POSTFIX_OP=14, DECREMENT_POSTFIX_OP=15, 
		ADDTO_OP=16, TAKEFROM_OP=17, POINT=18, ENDLINE=19, COMMA=20, QUOTE=21, 
		LBRACKET=22, RBRACKET=23, LBRACE=24, RBRACE=25, EQUALS=26, FUNCDEF_SYM=27, 
		IF_SYM=28, ELSE_SYM=29, STATIC_SYM=30, CLASS_SYM=31, CONSTRUCTOR_SYM=32, 
		RETURN_SYM=33, IDENTIFIER=34, COMMENT=35, WS=36, UNKNOWN_SYMBOL=37, DECREMEMT_POSTFIX_OP=38;
	public const int
		RULE_compileUnit = 0, RULE_block = 1, RULE_statement = 2, RULE_expr = 3, 
		RULE_stat_define = 4, RULE_stat_assign = 5, RULE_stat_functionCall = 6, 
		RULE_stat_functionDef = 7, RULE_stat_classDef = 8, RULE_class_fieldDefine = 9, 
		RULE_class_functionDef = 10, RULE_stat_constructor = 11, RULE_stat_return = 12, 
		RULE_object_reference = 13, RULE_object_subreference = 14, RULE_value = 15, 
		RULE_params = 16, RULE_funcdefparams = 17, RULE_typeparam = 18, RULE_operator = 19, 
		RULE_postfix_op = 20;
	public static readonly string[] ruleNames = {
		"compileUnit", "block", "statement", "expr", "stat_define", "stat_assign", 
		"stat_functionCall", "stat_functionDef", "stat_classDef", "class_fieldDefine", 
		"class_functionDef", "stat_constructor", "stat_return", "object_reference", 
		"object_subreference", "value", "params", "funcdefparams", "typeparam", 
		"operator", "postfix_op"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, "'+'", "'-'", "'*'", "'/'", "'=='", "'>='", 
		"'<='", "'>'", "'<'", "'++'", "'--'", "'+='", "'-='", "'.'", "';'", "','", 
		"'\"'", "'('", "')'", "'{'", "'}'", "'='", "'func'", "'if'", "'else'", 
		"'static'", "'class'", "'construct'", "'return'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "INTEGER", "FLOAT", "BOOLEAN", "STRING", "ADD_OP", "TAKE_OP", "MUL_OP", 
		"DIV_OP", "EQUALS_OP", "GREATER_OR_EQUALS_OP", "LESS_OR_EQUALS_OP", "GREATER_OP", 
		"LESS_OP", "INCREMENT_POSTFIX_OP", "DECREMENT_POSTFIX_OP", "ADDTO_OP", 
		"TAKEFROM_OP", "POINT", "ENDLINE", "COMMA", "QUOTE", "LBRACKET", "RBRACKET", 
		"LBRACE", "RBRACE", "EQUALS", "FUNCDEF_SYM", "IF_SYM", "ELSE_SYM", "STATIC_SYM", 
		"CLASS_SYM", "CONSTRUCTOR_SYM", "RETURN_SYM", "IDENTIFIER", "COMMENT", 
		"WS", "UNKNOWN_SYMBOL", "DECREMEMT_POSTFIX_OP"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "stork.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public storkParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class CompileUnitContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(storkParser.Eof, 0); }
		public CompileUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compileUnit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IstorkListener typedListener = listener as IstorkListener;
			if (typedListener != null) typedListener.EnterCompileUnit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IstorkListener typedListener = listener as IstorkListener;
			if (typedListener != null) typedListener.ExitCompileUnit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstorkVisitor<TResult> typedVisitor = visitor as IstorkVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompileUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompileUnitContext compileUnit() {
		CompileUnitContext _localctx = new CompileUnitContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_compileUnit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 42; block();
			State = 43; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			IstorkListener typedListener = listener as IstorkListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IstorkListener typedListener = listener as IstorkListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstorkVisitor<TResult> typedVisitor = visitor as IstorkVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 48;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FUNCDEF_SYM) | (1L << CLASS_SYM) | (1L << RETURN_SYM) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 45; statement();
				}
				}
				State = 50;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public Stat_defineContext stat_define() {
			return GetRuleContext<Stat_defineContext>(0);
		}
		public Stat_assignContext stat_assign() {
			return GetRuleContext<Stat_assignContext>(0);
		}
		public Stat_functionCallContext stat_functionCall() {
			return GetRuleContext<Stat_functionCallContext>(0);
		}
		public Stat_functionDefContext stat_functionDef() {
			return GetRuleContext<Stat_functionDefContext>(0);
		}
		public Stat_classDefContext stat_classDef() {
			return GetRuleContext<Stat_classDefContext>(0);
		}
		public Stat_returnContext stat_return() {
			return GetRuleContext<Stat_returnContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IstorkListener typedListener = listener as IstorkListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IstorkListener typedListener = listener as IstorkListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstorkVisitor<TResult> typedVisitor = visitor as IstorkVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 57;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1,_ctx) ) {
			case 1:
				{
				State = 51; stat_define();
				}
				break;

			case 2:
				{
				State = 52; stat_assign();
				}
				break;

			case 3:
				{
				State = 53; stat_functionCall();
				}
				break;

			case 4:
				{
				State = 54; stat_functionDef();
				}
				break;

			case 5:
				{
				State = 55; stat_classDef();
				}
				break;

			case 6:
				{
				State = 56; stat_return();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext lexpr;
		public ExprContext rexpr;
		public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public ITerminalNode LBRACKET() { return GetToken(storkParser.LBRACKET, 0); }
		public ITerminalNode RBRACKET() { return GetToken(storkParser.RBRACKET, 0); }
		public OperatorContext @operator() {
			return GetRuleContext<OperatorContext>(0);
		}
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public Postfix_opContext postfix_op() {
			return GetRuleContext<Postfix_opContext>(0);
		}
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IstorkListener typedListener = listener as IstorkListener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IstorkListener typedListener = listener as IstorkListener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstorkVisitor<TResult> typedVisitor = visitor as IstorkVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(_ctx, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 6;
		EnterRecursionRule(_localctx, 6, RULE_expr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 65;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case INTEGER:
			case FLOAT:
			case BOOLEAN:
			case STRING:
			case IDENTIFIER:
				{
				State = 60; value();
				}
				break;
			case LBRACKET:
				{
				State = 61; Match(LBRACKET);
				State = 62; value();
				State = 63; Match(RBRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			_ctx.stop = _input.Lt(-1);
			State = 75;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,4,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 73;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,3,_ctx) ) {
					case 1:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						_localctx.lexpr = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 67;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 68; @operator();
						State = 69; _localctx.rexpr = expr(3);
						}
						break;

					case 2:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 71;
						if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
						State = 72; postfix_op();
						}
						break;
					}
					} 
				}
				State = 77;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,4,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Stat_defineContext : ParserRuleContext {
		public IToken vartype;
		public IToken varname;
		public ITerminalNode EQUALS() { return GetToken(storkParser.EQUALS, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode ENDLINE() { return GetToken(storkParser.ENDLINE, 0); }
		public ITerminalNode[] IDENTIFIER() { return GetTokens(storkParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(storkParser.IDENTIFIER, i);
		}
		public Stat_defineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_define; } }
		public override void EnterRule(IParseTreeListener listener) {
			IstorkListener typedListener = listener as IstorkListener;
			if (typedListener != null) typedListener.EnterStat_define(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IstorkListener typedListener = listener as IstorkListener;
			if (typedListener != null) typedListener.ExitStat_define(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstorkVisitor<TResult> typedVisitor = visitor as IstorkVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_define(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_defineContext stat_define() {
		Stat_defineContext _localctx = new Stat_defineContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_stat_define);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 78; _localctx.vartype = Match(IDENTIFIER);
			State = 79; _localctx.varname = Match(IDENTIFIER);
			State = 80; Match(EQUALS);
			State = 81; expr(0);
			State = 82; Match(ENDLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_assignContext : ParserRuleContext {
		public Object_referenceContext object_reference() {
			return GetRuleContext<Object_referenceContext>(0);
		}
		public ITerminalNode EQUALS() { return GetToken(storkParser.EQUALS, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode ENDLINE() { return GetToken(storkParser.ENDLINE, 0); }
		public Stat_assignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_assign; } }
		public override void EnterRule(IParseTreeListener listener) {
			IstorkListener typedListener = listener as IstorkListener;
			if (typedListener != null) typedListener.EnterStat_assign(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IstorkListener typedListener = listener as IstorkListener;
			if (typedListener != null) typedListener.ExitStat_assign(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstorkVisitor<TResult> typedVisitor = visitor as IstorkVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_assign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_assignContext stat_assign() {
		Stat_assignContext _localctx = new Stat_assignContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_stat_assign);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 84; object_reference();
			State = 85; Match(EQUALS);
			State = 86; expr(0);
			State = 87; Match(ENDLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_functionCallContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(storkParser.IDENTIFIER, 0); }
		public ITerminalNode LBRACKET() { return GetToken(storkParser.LBRACKET, 0); }
		public ITerminalNode RBRACKET() { return GetToken(storkParser.RBRACKET, 0); }
		public ITerminalNode ENDLINE() { return GetToken(storkParser.ENDLINE, 0); }
		public ParamsContext @params() {
			return GetRuleContext<ParamsContext>(0);
		}
		public Stat_functionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_functionCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IstorkListener typedListener = listener as IstorkListener;
			if (typedListener != null) typedListener.EnterStat_functionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IstorkListener typedListener = listener as IstorkListener;
			if (typedListener != null) typedListener.ExitStat_functionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstorkVisitor<TResult> typedVisitor = visitor as IstorkVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_functionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_functionCallContext stat_functionCall() {
		Stat_functionCallContext _localctx = new Stat_functionCallContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_stat_functionCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 89; Match(IDENTIFIER);
			State = 90; Match(LBRACKET);
			State = 92;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INTEGER) | (1L << FLOAT) | (1L << BOOLEAN) | (1L << STRING) | (1L << LBRACKET) | (1L << IDENTIFIER))) != 0)) {
				{
				State = 91; @params();
				}
			}

			State = 94; Match(RBRACKET);
			State = 95; Match(ENDLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_functionDefContext : ParserRuleContext {
		public ITerminalNode FUNCDEF_SYM() { return GetToken(storkParser.FUNCDEF_SYM, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(storkParser.IDENTIFIER, 0); }
		public ITerminalNode LBRACKET() { return GetToken(storkParser.LBRACKET, 0); }
		public ITerminalNode RBRACKET() { return GetToken(storkParser.RBRACKET, 0); }
		public ITerminalNode LBRACE() { return GetToken(storkParser.LBRACE, 0); }
		public ITerminalNode RBRACE() { return GetToken(storkParser.RBRACE, 0); }
		public FuncdefparamsContext funcdefparams() {
			return GetRuleContext<FuncdefparamsContext>(0);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public Stat_functionDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_functionDef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IstorkListener typedListener = listener as IstorkListener;
			if (typedListener != null) typedListener.EnterStat_functionDef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IstorkListener typedListener = listener as IstorkListener;
			if (typedListener != null) typedListener.ExitStat_functionDef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstorkVisitor<TResult> typedVisitor = visitor as IstorkVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_functionDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_functionDefContext stat_functionDef() {
		Stat_functionDefContext _localctx = new Stat_functionDefContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_stat_functionDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 97; Match(FUNCDEF_SYM);
			State = 98; Match(IDENTIFIER);
			State = 99; Match(LBRACKET);
			State = 101;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==IDENTIFIER) {
				{
				State = 100; funcdefparams();
				}
			}

			State = 103; Match(RBRACKET);
			State = 104; Match(LBRACE);
			State = 108;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FUNCDEF_SYM) | (1L << CLASS_SYM) | (1L << RETURN_SYM) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 105; statement();
				}
				}
				State = 110;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 111; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_classDefContext : ParserRuleContext {
		public ITerminalNode CLASS_SYM() { return GetToken(storkParser.CLASS_SYM, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(storkParser.IDENTIFIER, 0); }
		public ITerminalNode LBRACKET() { return GetToken(storkParser.LBRACKET, 0); }
		public ITerminalNode RBRACKET() { return GetToken(storkParser.RBRACKET, 0); }
		public ITerminalNode LBRACE() { return GetToken(storkParser.LBRACE, 0); }
		public ITerminalNode RBRACE() { return GetToken(storkParser.RBRACE, 0); }
		public FuncdefparamsContext funcdefparams() {
			return GetRuleContext<FuncdefparamsContext>(0);
		}
		public Stat_constructorContext stat_constructor() {
			return GetRuleContext<Stat_constructorContext>(0);
		}
		public Class_fieldDefineContext[] class_fieldDefine() {
			return GetRuleContexts<Class_fieldDefineContext>();
		}
		public Class_fieldDefineContext class_fieldDefine(int i) {
			return GetRuleContext<Class_fieldDefineContext>(i);
		}
		public Class_functionDefContext[] class_functionDef() {
			return GetRuleContexts<Class_functionDefContext>();
		}
		public Class_functionDefContext class_functionDef(int i) {
			return GetRuleContext<Class_functionDefContext>(i);
		}
		public Stat_classDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_classDef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IstorkListener typedListener = listener as IstorkListener;
			if (typedListener != null) typedListener.EnterStat_classDef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IstorkListener typedListener = listener as IstorkListener;
			if (typedListener != null) typedListener.ExitStat_classDef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstorkVisitor<TResult> typedVisitor = visitor as IstorkVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_classDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_classDefContext stat_classDef() {
		Stat_classDefContext _localctx = new Stat_classDefContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_stat_classDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 113; Match(CLASS_SYM);
			State = 114; Match(IDENTIFIER);
			State = 115; Match(LBRACKET);
			State = 117;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==IDENTIFIER) {
				{
				State = 116; funcdefparams();
				}
			}

			State = 119; Match(RBRACKET);
			State = 120; Match(LBRACE);
			State = 122;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==CONSTRUCTOR_SYM) {
				{
				State = 121; stat_constructor();
				}
			}

			State = 128;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FUNCDEF_SYM) | (1L << STATIC_SYM) | (1L << IDENTIFIER))) != 0)) {
				{
				State = 126;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,10,_ctx) ) {
				case 1:
					{
					State = 124; class_fieldDefine();
					}
					break;

				case 2:
					{
					State = 125; class_functionDef();
					}
					break;
				}
				}
				State = 130;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 131; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_fieldDefineContext : ParserRuleContext {
		public IToken vartype;
		public IToken varname;
		public ITerminalNode ENDLINE() { return GetToken(storkParser.ENDLINE, 0); }
		public ITerminalNode[] IDENTIFIER() { return GetTokens(storkParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(storkParser.IDENTIFIER, i);
		}
		public ITerminalNode STATIC_SYM() { return GetToken(storkParser.STATIC_SYM, 0); }
		public Class_fieldDefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_fieldDefine; } }
		public override void EnterRule(IParseTreeListener listener) {
			IstorkListener typedListener = listener as IstorkListener;
			if (typedListener != null) typedListener.EnterClass_fieldDefine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IstorkListener typedListener = listener as IstorkListener;
			if (typedListener != null) typedListener.ExitClass_fieldDefine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstorkVisitor<TResult> typedVisitor = visitor as IstorkVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_fieldDefine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Class_fieldDefineContext class_fieldDefine() {
		Class_fieldDefineContext _localctx = new Class_fieldDefineContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_class_fieldDefine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 134;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==STATIC_SYM) {
				{
				State = 133; Match(STATIC_SYM);
				}
			}

			State = 136; _localctx.vartype = Match(IDENTIFIER);
			State = 137; _localctx.varname = Match(IDENTIFIER);
			State = 138; Match(ENDLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_functionDefContext : ParserRuleContext {
		public Stat_functionDefContext stat_functionDef() {
			return GetRuleContext<Stat_functionDefContext>(0);
		}
		public ITerminalNode STATIC_SYM() { return GetToken(storkParser.STATIC_SYM, 0); }
		public Class_functionDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_functionDef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IstorkListener typedListener = listener as IstorkListener;
			if (typedListener != null) typedListener.EnterClass_functionDef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IstorkListener typedListener = listener as IstorkListener;
			if (typedListener != null) typedListener.ExitClass_functionDef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstorkVisitor<TResult> typedVisitor = visitor as IstorkVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_functionDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Class_functionDefContext class_functionDef() {
		Class_functionDefContext _localctx = new Class_functionDefContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_class_functionDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 141;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==STATIC_SYM) {
				{
				State = 140; Match(STATIC_SYM);
				}
			}

			State = 143; stat_functionDef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_constructorContext : ParserRuleContext {
		public ITerminalNode CONSTRUCTOR_SYM() { return GetToken(storkParser.CONSTRUCTOR_SYM, 0); }
		public ITerminalNode LBRACE() { return GetToken(storkParser.LBRACE, 0); }
		public ITerminalNode RBRACE() { return GetToken(storkParser.RBRACE, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public Stat_constructorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_constructor; } }
		public override void EnterRule(IParseTreeListener listener) {
			IstorkListener typedListener = listener as IstorkListener;
			if (typedListener != null) typedListener.EnterStat_constructor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IstorkListener typedListener = listener as IstorkListener;
			if (typedListener != null) typedListener.ExitStat_constructor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstorkVisitor<TResult> typedVisitor = visitor as IstorkVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_constructor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_constructorContext stat_constructor() {
		Stat_constructorContext _localctx = new Stat_constructorContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_stat_constructor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 145; Match(CONSTRUCTOR_SYM);
			State = 146; Match(LBRACE);
			State = 150;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FUNCDEF_SYM) | (1L << CLASS_SYM) | (1L << RETURN_SYM) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 147; statement();
				}
				}
				State = 152;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 153; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_returnContext : ParserRuleContext {
		public ITerminalNode RETURN_SYM() { return GetToken(storkParser.RETURN_SYM, 0); }
		public Object_referenceContext object_reference() {
			return GetRuleContext<Object_referenceContext>(0);
		}
		public Stat_returnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_return; } }
		public override void EnterRule(IParseTreeListener listener) {
			IstorkListener typedListener = listener as IstorkListener;
			if (typedListener != null) typedListener.EnterStat_return(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IstorkListener typedListener = listener as IstorkListener;
			if (typedListener != null) typedListener.ExitStat_return(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstorkVisitor<TResult> typedVisitor = visitor as IstorkVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_return(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_returnContext stat_return() {
		Stat_returnContext _localctx = new Stat_returnContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_stat_return);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 155; Match(RETURN_SYM);
			State = 156; object_reference();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Object_referenceContext : ParserRuleContext {
		public Object_subreferenceContext[] object_subreference() {
			return GetRuleContexts<Object_subreferenceContext>();
		}
		public Object_subreferenceContext object_subreference(int i) {
			return GetRuleContext<Object_subreferenceContext>(i);
		}
		public ITerminalNode[] POINT() { return GetTokens(storkParser.POINT); }
		public ITerminalNode POINT(int i) {
			return GetToken(storkParser.POINT, i);
		}
		public Object_referenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object_reference; } }
		public override void EnterRule(IParseTreeListener listener) {
			IstorkListener typedListener = listener as IstorkListener;
			if (typedListener != null) typedListener.EnterObject_reference(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IstorkListener typedListener = listener as IstorkListener;
			if (typedListener != null) typedListener.ExitObject_reference(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstorkVisitor<TResult> typedVisitor = visitor as IstorkVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObject_reference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Object_referenceContext object_reference() {
		Object_referenceContext _localctx = new Object_referenceContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_object_reference);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 163;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,15,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 158; object_subreference();
					State = 159; Match(POINT);
					}
					} 
				}
				State = 165;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,15,_ctx);
			}
			State = 166; object_subreference();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Object_subreferenceContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(storkParser.IDENTIFIER, 0); }
		public Stat_functionCallContext stat_functionCall() {
			return GetRuleContext<Stat_functionCallContext>(0);
		}
		public Object_subreferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object_subreference; } }
		public override void EnterRule(IParseTreeListener listener) {
			IstorkListener typedListener = listener as IstorkListener;
			if (typedListener != null) typedListener.EnterObject_subreference(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IstorkListener typedListener = listener as IstorkListener;
			if (typedListener != null) typedListener.ExitObject_subreference(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstorkVisitor<TResult> typedVisitor = visitor as IstorkVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObject_subreference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Object_subreferenceContext object_subreference() {
		Object_subreferenceContext _localctx = new Object_subreferenceContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_object_subreference);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 170;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,16,_ctx) ) {
			case 1:
				{
				State = 168; Match(IDENTIFIER);
				}
				break;

			case 2:
				{
				State = 169; stat_functionCall();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		public ITerminalNode INTEGER() { return GetToken(storkParser.INTEGER, 0); }
		public ITerminalNode FLOAT() { return GetToken(storkParser.FLOAT, 0); }
		public ITerminalNode BOOLEAN() { return GetToken(storkParser.BOOLEAN, 0); }
		public ITerminalNode STRING() { return GetToken(storkParser.STRING, 0); }
		public Object_referenceContext object_reference() {
			return GetRuleContext<Object_referenceContext>(0);
		}
		public Stat_functionCallContext stat_functionCall() {
			return GetRuleContext<Stat_functionCallContext>(0);
		}
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			IstorkListener typedListener = listener as IstorkListener;
			if (typedListener != null) typedListener.EnterValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IstorkListener typedListener = listener as IstorkListener;
			if (typedListener != null) typedListener.ExitValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstorkVisitor<TResult> typedVisitor = visitor as IstorkVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_value);
		try {
			State = 178;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,17,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 172; Match(INTEGER);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 173; Match(FLOAT);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 174; Match(BOOLEAN);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 175; Match(STRING);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 176; object_reference();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 177; stat_functionCall();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamsContext : ParserRuleContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(storkParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(storkParser.COMMA, i);
		}
		public ParamsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_params; } }
		public override void EnterRule(IParseTreeListener listener) {
			IstorkListener typedListener = listener as IstorkListener;
			if (typedListener != null) typedListener.EnterParams(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IstorkListener typedListener = listener as IstorkListener;
			if (typedListener != null) typedListener.ExitParams(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstorkVisitor<TResult> typedVisitor = visitor as IstorkVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParams(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamsContext @params() {
		ParamsContext _localctx = new ParamsContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_params);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 185;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,18,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 180; expr(0);
					State = 181; Match(COMMA);
					}
					} 
				}
				State = 187;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,18,_ctx);
			}
			State = 188; expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncdefparamsContext : ParserRuleContext {
		public TypeparamContext[] typeparam() {
			return GetRuleContexts<TypeparamContext>();
		}
		public TypeparamContext typeparam(int i) {
			return GetRuleContext<TypeparamContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(storkParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(storkParser.COMMA, i);
		}
		public FuncdefparamsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcdefparams; } }
		public override void EnterRule(IParseTreeListener listener) {
			IstorkListener typedListener = listener as IstorkListener;
			if (typedListener != null) typedListener.EnterFuncdefparams(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IstorkListener typedListener = listener as IstorkListener;
			if (typedListener != null) typedListener.ExitFuncdefparams(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstorkVisitor<TResult> typedVisitor = visitor as IstorkVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncdefparams(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncdefparamsContext funcdefparams() {
		FuncdefparamsContext _localctx = new FuncdefparamsContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_funcdefparams);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 195;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,19,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 190; typeparam();
					State = 191; Match(COMMA);
					}
					} 
				}
				State = 197;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,19,_ctx);
			}
			State = 198; typeparam();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeparamContext : ParserRuleContext {
		public IToken typename;
		public IToken paramname;
		public ITerminalNode[] IDENTIFIER() { return GetTokens(storkParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(storkParser.IDENTIFIER, i);
		}
		public TypeparamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeparam; } }
		public override void EnterRule(IParseTreeListener listener) {
			IstorkListener typedListener = listener as IstorkListener;
			if (typedListener != null) typedListener.EnterTypeparam(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IstorkListener typedListener = listener as IstorkListener;
			if (typedListener != null) typedListener.ExitTypeparam(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstorkVisitor<TResult> typedVisitor = visitor as IstorkVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeparam(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeparamContext typeparam() {
		TypeparamContext _localctx = new TypeparamContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_typeparam);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 200; _localctx.typename = Match(IDENTIFIER);
			State = 201; _localctx.paramname = Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorContext : ParserRuleContext {
		public ITerminalNode ADD_OP() { return GetToken(storkParser.ADD_OP, 0); }
		public ITerminalNode TAKE_OP() { return GetToken(storkParser.TAKE_OP, 0); }
		public ITerminalNode MUL_OP() { return GetToken(storkParser.MUL_OP, 0); }
		public ITerminalNode DIV_OP() { return GetToken(storkParser.DIV_OP, 0); }
		public OperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IstorkListener typedListener = listener as IstorkListener;
			if (typedListener != null) typedListener.EnterOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IstorkListener typedListener = listener as IstorkListener;
			if (typedListener != null) typedListener.ExitOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstorkVisitor<TResult> typedVisitor = visitor as IstorkVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorContext @operator() {
		OperatorContext _localctx = new OperatorContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 203;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD_OP) | (1L << TAKE_OP) | (1L << MUL_OP) | (1L << DIV_OP))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Postfix_opContext : ParserRuleContext {
		public ITerminalNode INCREMENT_POSTFIX_OP() { return GetToken(storkParser.INCREMENT_POSTFIX_OP, 0); }
		public ITerminalNode DECREMEMT_POSTFIX_OP() { return GetToken(storkParser.DECREMEMT_POSTFIX_OP, 0); }
		public Postfix_opContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postfix_op; } }
		public override void EnterRule(IParseTreeListener listener) {
			IstorkListener typedListener = listener as IstorkListener;
			if (typedListener != null) typedListener.EnterPostfix_op(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IstorkListener typedListener = listener as IstorkListener;
			if (typedListener != null) typedListener.ExitPostfix_op(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstorkVisitor<TResult> typedVisitor = visitor as IstorkVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostfix_op(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Postfix_opContext postfix_op() {
		Postfix_opContext _localctx = new Postfix_opContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_postfix_op);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 205;
			_la = _input.La(1);
			if ( !(_la==INCREMENT_POSTFIX_OP || _la==DECREMEMT_POSTFIX_OP) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 3: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 2);

		case 1: return Precpred(_ctx, 1);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3(\xD2\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x3\x2\x3\x2\x3\x2\x3\x3\a\x3\x31\n\x3\f\x3\xE\x3\x34\v\x3"+
		"\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x5\x4<\n\x4\x3\x5\x3\x5\x3\x5\x3"+
		"\x5\x3\x5\x3\x5\x5\x5\x44\n\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\a\x5"+
		"L\n\x5\f\x5\xE\x5O\v\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\a\x3\a"+
		"\x3\a\x3\a\x3\a\x3\b\x3\b\x3\b\x5\b_\n\b\x3\b\x3\b\x3\b\x3\t\x3\t\x3\t"+
		"\x3\t\x5\th\n\t\x3\t\x3\t\x3\t\a\tm\n\t\f\t\xE\tp\v\t\x3\t\x3\t\x3\n\x3"+
		"\n\x3\n\x3\n\x5\nx\n\n\x3\n\x3\n\x3\n\x5\n}\n\n\x3\n\x3\n\a\n\x81\n\n"+
		"\f\n\xE\n\x84\v\n\x3\n\x3\n\x3\v\x5\v\x89\n\v\x3\v\x3\v\x3\v\x3\v\x3\f"+
		"\x5\f\x90\n\f\x3\f\x3\f\x3\r\x3\r\x3\r\a\r\x97\n\r\f\r\xE\r\x9A\v\r\x3"+
		"\r\x3\r\x3\xE\x3\xE\x3\xE\x3\xF\x3\xF\x3\xF\a\xF\xA4\n\xF\f\xF\xE\xF\xA7"+
		"\v\xF\x3\xF\x3\xF\x3\x10\x3\x10\x5\x10\xAD\n\x10\x3\x11\x3\x11\x3\x11"+
		"\x3\x11\x3\x11\x3\x11\x5\x11\xB5\n\x11\x3\x12\x3\x12\x3\x12\a\x12\xBA"+
		"\n\x12\f\x12\xE\x12\xBD\v\x12\x3\x12\x3\x12\x3\x13\x3\x13\x3\x13\a\x13"+
		"\xC4\n\x13\f\x13\xE\x13\xC7\v\x13\x3\x13\x3\x13\x3\x14\x3\x14\x3\x14\x3"+
		"\x15\x3\x15\x3\x16\x3\x16\x3\x16\x2\x2\x3\b\x17\x2\x2\x4\x2\x6\x2\b\x2"+
		"\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E"+
		"\x2 \x2\"\x2$\x2&\x2(\x2*\x2\x2\x4\x3\x2\a\n\x4\x2\x10\x10((\xD8\x2,\x3"+
		"\x2\x2\x2\x4\x32\x3\x2\x2\x2\x6;\x3\x2\x2\x2\b\x43\x3\x2\x2\x2\nP\x3\x2"+
		"\x2\x2\fV\x3\x2\x2\x2\xE[\x3\x2\x2\x2\x10\x63\x3\x2\x2\x2\x12s\x3\x2\x2"+
		"\x2\x14\x88\x3\x2\x2\x2\x16\x8F\x3\x2\x2\x2\x18\x93\x3\x2\x2\x2\x1A\x9D"+
		"\x3\x2\x2\x2\x1C\xA5\x3\x2\x2\x2\x1E\xAC\x3\x2\x2\x2 \xB4\x3\x2\x2\x2"+
		"\"\xBB\x3\x2\x2\x2$\xC5\x3\x2\x2\x2&\xCA\x3\x2\x2\x2(\xCD\x3\x2\x2\x2"+
		"*\xCF\x3\x2\x2\x2,-\x5\x4\x3\x2-.\a\x2\x2\x3.\x3\x3\x2\x2\x2/\x31\x5\x6"+
		"\x4\x2\x30/\x3\x2\x2\x2\x31\x34\x3\x2\x2\x2\x32\x30\x3\x2\x2\x2\x32\x33"+
		"\x3\x2\x2\x2\x33\x5\x3\x2\x2\x2\x34\x32\x3\x2\x2\x2\x35<\x5\n\x6\x2\x36"+
		"<\x5\f\a\x2\x37<\x5\xE\b\x2\x38<\x5\x10\t\x2\x39<\x5\x12\n\x2:<\x5\x1A"+
		"\xE\x2;\x35\x3\x2\x2\x2;\x36\x3\x2\x2\x2;\x37\x3\x2\x2\x2;\x38\x3\x2\x2"+
		"\x2;\x39\x3\x2\x2\x2;:\x3\x2\x2\x2<\a\x3\x2\x2\x2=>\b\x5\x1\x2>\x44\x5"+
		" \x11\x2?@\a\x18\x2\x2@\x41\x5 \x11\x2\x41\x42\a\x19\x2\x2\x42\x44\x3"+
		"\x2\x2\x2\x43=\x3\x2\x2\x2\x43?\x3\x2\x2\x2\x44M\x3\x2\x2\x2\x45\x46\f"+
		"\x4\x2\x2\x46G\x5(\x15\x2GH\x5\b\x5\x5HL\x3\x2\x2\x2IJ\f\x3\x2\x2JL\x5"+
		"*\x16\x2K\x45\x3\x2\x2\x2KI\x3\x2\x2\x2LO\x3\x2\x2\x2MK\x3\x2\x2\x2MN"+
		"\x3\x2\x2\x2N\t\x3\x2\x2\x2OM\x3\x2\x2\x2PQ\a$\x2\x2QR\a$\x2\x2RS\a\x1C"+
		"\x2\x2ST\x5\b\x5\x2TU\a\x15\x2\x2U\v\x3\x2\x2\x2VW\x5\x1C\xF\x2WX\a\x1C"+
		"\x2\x2XY\x5\b\x5\x2YZ\a\x15\x2\x2Z\r\x3\x2\x2\x2[\\\a$\x2\x2\\^\a\x18"+
		"\x2\x2]_\x5\"\x12\x2^]\x3\x2\x2\x2^_\x3\x2\x2\x2_`\x3\x2\x2\x2`\x61\a"+
		"\x19\x2\x2\x61\x62\a\x15\x2\x2\x62\xF\x3\x2\x2\x2\x63\x64\a\x1D\x2\x2"+
		"\x64\x65\a$\x2\x2\x65g\a\x18\x2\x2\x66h\x5$\x13\x2g\x66\x3\x2\x2\x2gh"+
		"\x3\x2\x2\x2hi\x3\x2\x2\x2ij\a\x19\x2\x2jn\a\x1A\x2\x2km\x5\x6\x4\x2l"+
		"k\x3\x2\x2\x2mp\x3\x2\x2\x2nl\x3\x2\x2\x2no\x3\x2\x2\x2oq\x3\x2\x2\x2"+
		"pn\x3\x2\x2\x2qr\a\x1B\x2\x2r\x11\x3\x2\x2\x2st\a!\x2\x2tu\a$\x2\x2uw"+
		"\a\x18\x2\x2vx\x5$\x13\x2wv\x3\x2\x2\x2wx\x3\x2\x2\x2xy\x3\x2\x2\x2yz"+
		"\a\x19\x2\x2z|\a\x1A\x2\x2{}\x5\x18\r\x2|{\x3\x2\x2\x2|}\x3\x2\x2\x2}"+
		"\x82\x3\x2\x2\x2~\x81\x5\x14\v\x2\x7F\x81\x5\x16\f\x2\x80~\x3\x2\x2\x2"+
		"\x80\x7F\x3\x2\x2\x2\x81\x84\x3\x2\x2\x2\x82\x80\x3\x2\x2\x2\x82\x83\x3"+
		"\x2\x2\x2\x83\x85\x3\x2\x2\x2\x84\x82\x3\x2\x2\x2\x85\x86\a\x1B\x2\x2"+
		"\x86\x13\x3\x2\x2\x2\x87\x89\a \x2\x2\x88\x87\x3\x2\x2\x2\x88\x89\x3\x2"+
		"\x2\x2\x89\x8A\x3\x2\x2\x2\x8A\x8B\a$\x2\x2\x8B\x8C\a$\x2\x2\x8C\x8D\a"+
		"\x15\x2\x2\x8D\x15\x3\x2\x2\x2\x8E\x90\a \x2\x2\x8F\x8E\x3\x2\x2\x2\x8F"+
		"\x90\x3\x2\x2\x2\x90\x91\x3\x2\x2\x2\x91\x92\x5\x10\t\x2\x92\x17\x3\x2"+
		"\x2\x2\x93\x94\a\"\x2\x2\x94\x98\a\x1A\x2\x2\x95\x97\x5\x6\x4\x2\x96\x95"+
		"\x3\x2\x2\x2\x97\x9A\x3\x2\x2\x2\x98\x96\x3\x2\x2\x2\x98\x99\x3\x2\x2"+
		"\x2\x99\x9B\x3\x2\x2\x2\x9A\x98\x3\x2\x2\x2\x9B\x9C\a\x1B\x2\x2\x9C\x19"+
		"\x3\x2\x2\x2\x9D\x9E\a#\x2\x2\x9E\x9F\x5\x1C\xF\x2\x9F\x1B\x3\x2\x2\x2"+
		"\xA0\xA1\x5\x1E\x10\x2\xA1\xA2\a\x14\x2\x2\xA2\xA4\x3\x2\x2\x2\xA3\xA0"+
		"\x3\x2\x2\x2\xA4\xA7\x3\x2\x2\x2\xA5\xA3\x3\x2\x2\x2\xA5\xA6\x3\x2\x2"+
		"\x2\xA6\xA8\x3\x2\x2\x2\xA7\xA5\x3\x2\x2\x2\xA8\xA9\x5\x1E\x10\x2\xA9"+
		"\x1D\x3\x2\x2\x2\xAA\xAD\a$\x2\x2\xAB\xAD\x5\xE\b\x2\xAC\xAA\x3\x2\x2"+
		"\x2\xAC\xAB\x3\x2\x2\x2\xAD\x1F\x3\x2\x2\x2\xAE\xB5\a\x3\x2\x2\xAF\xB5"+
		"\a\x4\x2\x2\xB0\xB5\a\x5\x2\x2\xB1\xB5\a\x6\x2\x2\xB2\xB5\x5\x1C\xF\x2"+
		"\xB3\xB5\x5\xE\b\x2\xB4\xAE\x3\x2\x2\x2\xB4\xAF\x3\x2\x2\x2\xB4\xB0\x3"+
		"\x2\x2\x2\xB4\xB1\x3\x2\x2\x2\xB4\xB2\x3\x2\x2\x2\xB4\xB3\x3\x2\x2\x2"+
		"\xB5!\x3\x2\x2\x2\xB6\xB7\x5\b\x5\x2\xB7\xB8\a\x16\x2\x2\xB8\xBA\x3\x2"+
		"\x2\x2\xB9\xB6\x3\x2\x2\x2\xBA\xBD\x3\x2\x2\x2\xBB\xB9\x3\x2\x2\x2\xBB"+
		"\xBC\x3\x2\x2\x2\xBC\xBE\x3\x2\x2\x2\xBD\xBB\x3\x2\x2\x2\xBE\xBF\x5\b"+
		"\x5\x2\xBF#\x3\x2\x2\x2\xC0\xC1\x5&\x14\x2\xC1\xC2\a\x16\x2\x2\xC2\xC4"+
		"\x3\x2\x2\x2\xC3\xC0\x3\x2\x2\x2\xC4\xC7\x3\x2\x2\x2\xC5\xC3\x3\x2\x2"+
		"\x2\xC5\xC6\x3\x2\x2\x2\xC6\xC8\x3\x2\x2\x2\xC7\xC5\x3\x2\x2\x2\xC8\xC9"+
		"\x5&\x14\x2\xC9%\x3\x2\x2\x2\xCA\xCB\a$\x2\x2\xCB\xCC\a$\x2\x2\xCC\'\x3"+
		"\x2\x2\x2\xCD\xCE\t\x2\x2\x2\xCE)\x3\x2\x2\x2\xCF\xD0\t\x3\x2\x2\xD0+"+
		"\x3\x2\x2\x2\x16\x32;\x43KM^gnw|\x80\x82\x88\x8F\x98\xA5\xAC\xB4\xBB\xC5";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace stork
