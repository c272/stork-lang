//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:\Files\Programming\GitHub\stork\stork\stork.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace stork {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class storkParser : Parser {
	public const int
		INTEGER=1, FLOAT=2, BOOLEAN=3, STRING=4, ADD_OP=5, TAKE_OP=6, MUL_OP=7, 
		DIV_OP=8, EQUALS_OP=9, GREATER_OR_EQUALS_OP=10, LESS_OR_EQUALS_OP=11, 
		GREATER_OP=12, LESS_OP=13, INCREMENT_POSTFIX_OP=14, DECREMENT_POSTFIX_OP=15, 
		ADDTO_OP=16, TAKEFROM_OP=17, POINT=18, ENDLINE=19, COMMA=20, QUOTE=21, 
		LBRACKET=22, RBRACKET=23, LBRACE=24, RBRACE=25, EQUALS=26, FUNCDEF_SYM=27, 
		IF_SYM=28, ELSE_SYM=29, IDENTIFIER=30, WS=31, UNKNOWN_SYMBOL=32, DECREMEMT_POSTFIX_OP=33;
	public const int
		RULE_compileUnit = 0, RULE_block = 1, RULE_statement = 2, RULE_expr = 3, 
		RULE_stat_define = 4, RULE_stat_assign = 5, RULE_stat_functionCall = 6, 
		RULE_stat_functionDef = 7, RULE_object_reference = 8, RULE_value = 9, 
		RULE_params = 10, RULE_funcdefparams = 11, RULE_operator = 12, RULE_postfix_op = 13;
	public static readonly string[] ruleNames = {
		"compileUnit", "block", "statement", "expr", "stat_define", "stat_assign", 
		"stat_functionCall", "stat_functionDef", "object_reference", "value", 
		"params", "funcdefparams", "operator", "postfix_op"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, "'+'", "'-'", "'*'", "'/'", "'=='", "'>='", 
		"'<='", "'>'", "'<'", "'++'", "'--'", "'+='", "'-='", "'.'", "';'", "','", 
		"'\"'", "'('", "')'", "'{'", "'}'", "'='", "'func'", "'if'", "'else'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "INTEGER", "FLOAT", "BOOLEAN", "STRING", "ADD_OP", "TAKE_OP", "MUL_OP", 
		"DIV_OP", "EQUALS_OP", "GREATER_OR_EQUALS_OP", "LESS_OR_EQUALS_OP", "GREATER_OP", 
		"LESS_OP", "INCREMENT_POSTFIX_OP", "DECREMENT_POSTFIX_OP", "ADDTO_OP", 
		"TAKEFROM_OP", "POINT", "ENDLINE", "COMMA", "QUOTE", "LBRACKET", "RBRACKET", 
		"LBRACE", "RBRACE", "EQUALS", "FUNCDEF_SYM", "IF_SYM", "ELSE_SYM", "IDENTIFIER", 
		"WS", "UNKNOWN_SYMBOL", "DECREMEMT_POSTFIX_OP"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "stork.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public storkParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class CompileUnitContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(storkParser.Eof, 0); }
		public CompileUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compileUnit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IstorkListener typedListener = listener as IstorkListener;
			if (typedListener != null) typedListener.EnterCompileUnit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IstorkListener typedListener = listener as IstorkListener;
			if (typedListener != null) typedListener.ExitCompileUnit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstorkVisitor<TResult> typedVisitor = visitor as IstorkVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompileUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompileUnitContext compileUnit() {
		CompileUnitContext _localctx = new CompileUnitContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_compileUnit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 28; block();
			State = 29; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			IstorkListener typedListener = listener as IstorkListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IstorkListener typedListener = listener as IstorkListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstorkVisitor<TResult> typedVisitor = visitor as IstorkVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 34;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==FUNCDEF_SYM || _la==IDENTIFIER) {
				{
				{
				State = 31; statement();
				}
				}
				State = 36;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public ITerminalNode ENDLINE() { return GetToken(storkParser.ENDLINE, 0); }
		public Stat_defineContext stat_define() {
			return GetRuleContext<Stat_defineContext>(0);
		}
		public Stat_assignContext stat_assign() {
			return GetRuleContext<Stat_assignContext>(0);
		}
		public Stat_functionCallContext stat_functionCall() {
			return GetRuleContext<Stat_functionCallContext>(0);
		}
		public Stat_functionDefContext stat_functionDef() {
			return GetRuleContext<Stat_functionDefContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IstorkListener typedListener = listener as IstorkListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IstorkListener typedListener = listener as IstorkListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstorkVisitor<TResult> typedVisitor = visitor as IstorkVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 41;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1,_ctx) ) {
			case 1:
				{
				State = 37; stat_define();
				}
				break;

			case 2:
				{
				State = 38; stat_assign();
				}
				break;

			case 3:
				{
				State = 39; stat_functionCall();
				}
				break;

			case 4:
				{
				State = 40; stat_functionDef();
				}
				break;
			}
			State = 43; Match(ENDLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext lexpr;
		public ExprContext rexpr;
		public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public ITerminalNode LBRACKET() { return GetToken(storkParser.LBRACKET, 0); }
		public ITerminalNode RBRACKET() { return GetToken(storkParser.RBRACKET, 0); }
		public OperatorContext @operator() {
			return GetRuleContext<OperatorContext>(0);
		}
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public Postfix_opContext postfix_op() {
			return GetRuleContext<Postfix_opContext>(0);
		}
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IstorkListener typedListener = listener as IstorkListener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IstorkListener typedListener = listener as IstorkListener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstorkVisitor<TResult> typedVisitor = visitor as IstorkVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(_ctx, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 6;
		EnterRecursionRule(_localctx, 6, RULE_expr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 51;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case INTEGER:
			case FLOAT:
			case BOOLEAN:
			case STRING:
			case IDENTIFIER:
				{
				State = 46; value();
				}
				break;
			case LBRACKET:
				{
				State = 47; Match(LBRACKET);
				State = 48; value();
				State = 49; Match(RBRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			_ctx.stop = _input.Lt(-1);
			State = 61;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,4,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 59;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,3,_ctx) ) {
					case 1:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						_localctx.lexpr = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 53;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 54; @operator();
						State = 55; _localctx.rexpr = expr(3);
						}
						break;

					case 2:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 57;
						if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
						State = 58; postfix_op();
						}
						break;
					}
					} 
				}
				State = 63;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,4,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Stat_defineContext : ParserRuleContext {
		public IToken vartype;
		public IToken varname;
		public ITerminalNode EQUALS() { return GetToken(storkParser.EQUALS, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode[] IDENTIFIER() { return GetTokens(storkParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(storkParser.IDENTIFIER, i);
		}
		public Stat_defineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_define; } }
		public override void EnterRule(IParseTreeListener listener) {
			IstorkListener typedListener = listener as IstorkListener;
			if (typedListener != null) typedListener.EnterStat_define(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IstorkListener typedListener = listener as IstorkListener;
			if (typedListener != null) typedListener.ExitStat_define(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstorkVisitor<TResult> typedVisitor = visitor as IstorkVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_define(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_defineContext stat_define() {
		Stat_defineContext _localctx = new Stat_defineContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_stat_define);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 64; _localctx.vartype = Match(IDENTIFIER);
			State = 65; _localctx.varname = Match(IDENTIFIER);
			State = 66; Match(EQUALS);
			State = 67; expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_assignContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(storkParser.IDENTIFIER, 0); }
		public ITerminalNode EQUALS() { return GetToken(storkParser.EQUALS, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Stat_assignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_assign; } }
		public override void EnterRule(IParseTreeListener listener) {
			IstorkListener typedListener = listener as IstorkListener;
			if (typedListener != null) typedListener.EnterStat_assign(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IstorkListener typedListener = listener as IstorkListener;
			if (typedListener != null) typedListener.ExitStat_assign(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstorkVisitor<TResult> typedVisitor = visitor as IstorkVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_assign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_assignContext stat_assign() {
		Stat_assignContext _localctx = new Stat_assignContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_stat_assign);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 69; Match(IDENTIFIER);
			State = 70; Match(EQUALS);
			State = 71; expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_functionCallContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(storkParser.IDENTIFIER, 0); }
		public ITerminalNode LBRACKET() { return GetToken(storkParser.LBRACKET, 0); }
		public ITerminalNode RBRACKET() { return GetToken(storkParser.RBRACKET, 0); }
		public ParamsContext @params() {
			return GetRuleContext<ParamsContext>(0);
		}
		public Stat_functionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_functionCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IstorkListener typedListener = listener as IstorkListener;
			if (typedListener != null) typedListener.EnterStat_functionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IstorkListener typedListener = listener as IstorkListener;
			if (typedListener != null) typedListener.ExitStat_functionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstorkVisitor<TResult> typedVisitor = visitor as IstorkVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_functionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_functionCallContext stat_functionCall() {
		Stat_functionCallContext _localctx = new Stat_functionCallContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_stat_functionCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 73; Match(IDENTIFIER);
			State = 74; Match(LBRACKET);
			State = 76;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INTEGER) | (1L << FLOAT) | (1L << BOOLEAN) | (1L << STRING) | (1L << LBRACKET) | (1L << IDENTIFIER))) != 0)) {
				{
				State = 75; @params();
				}
			}

			State = 78; Match(RBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_functionDefContext : ParserRuleContext {
		public ITerminalNode FUNCDEF_SYM() { return GetToken(storkParser.FUNCDEF_SYM, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(storkParser.IDENTIFIER, 0); }
		public ITerminalNode LBRACKET() { return GetToken(storkParser.LBRACKET, 0); }
		public ITerminalNode RBRACKET() { return GetToken(storkParser.RBRACKET, 0); }
		public ITerminalNode LBRACE() { return GetToken(storkParser.LBRACE, 0); }
		public ITerminalNode RBRACE() { return GetToken(storkParser.RBRACE, 0); }
		public FuncdefparamsContext funcdefparams() {
			return GetRuleContext<FuncdefparamsContext>(0);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public Stat_functionDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_functionDef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IstorkListener typedListener = listener as IstorkListener;
			if (typedListener != null) typedListener.EnterStat_functionDef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IstorkListener typedListener = listener as IstorkListener;
			if (typedListener != null) typedListener.ExitStat_functionDef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstorkVisitor<TResult> typedVisitor = visitor as IstorkVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_functionDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_functionDefContext stat_functionDef() {
		Stat_functionDefContext _localctx = new Stat_functionDefContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_stat_functionDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 80; Match(FUNCDEF_SYM);
			State = 81; Match(IDENTIFIER);
			State = 82; Match(LBRACKET);
			State = 84;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==IDENTIFIER) {
				{
				State = 83; funcdefparams();
				}
			}

			State = 86; Match(RBRACKET);
			State = 87; Match(LBRACE);
			State = 91;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==FUNCDEF_SYM || _la==IDENTIFIER) {
				{
				{
				State = 88; statement();
				}
				}
				State = 93;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 94; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Object_referenceContext : ParserRuleContext {
		public ITerminalNode[] IDENTIFIER() { return GetTokens(storkParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(storkParser.IDENTIFIER, i);
		}
		public ITerminalNode[] POINT() { return GetTokens(storkParser.POINT); }
		public ITerminalNode POINT(int i) {
			return GetToken(storkParser.POINT, i);
		}
		public Stat_functionCallContext[] stat_functionCall() {
			return GetRuleContexts<Stat_functionCallContext>();
		}
		public Stat_functionCallContext stat_functionCall(int i) {
			return GetRuleContext<Stat_functionCallContext>(i);
		}
		public Object_referenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object_reference; } }
		public override void EnterRule(IParseTreeListener listener) {
			IstorkListener typedListener = listener as IstorkListener;
			if (typedListener != null) typedListener.EnterObject_reference(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IstorkListener typedListener = listener as IstorkListener;
			if (typedListener != null) typedListener.ExitObject_reference(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstorkVisitor<TResult> typedVisitor = visitor as IstorkVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObject_reference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Object_referenceContext object_reference() {
		Object_referenceContext _localctx = new Object_referenceContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_object_reference);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 103;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,9,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 98;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,8,_ctx) ) {
					case 1:
						{
						State = 96; Match(IDENTIFIER);
						}
						break;

					case 2:
						{
						State = 97; stat_functionCall();
						}
						break;
					}
					State = 100; Match(POINT);
					}
					} 
				}
				State = 105;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,9,_ctx);
			}
			State = 106; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		public ITerminalNode INTEGER() { return GetToken(storkParser.INTEGER, 0); }
		public ITerminalNode FLOAT() { return GetToken(storkParser.FLOAT, 0); }
		public ITerminalNode BOOLEAN() { return GetToken(storkParser.BOOLEAN, 0); }
		public ITerminalNode STRING() { return GetToken(storkParser.STRING, 0); }
		public Object_referenceContext object_reference() {
			return GetRuleContext<Object_referenceContext>(0);
		}
		public Stat_functionCallContext stat_functionCall() {
			return GetRuleContext<Stat_functionCallContext>(0);
		}
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			IstorkListener typedListener = listener as IstorkListener;
			if (typedListener != null) typedListener.EnterValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IstorkListener typedListener = listener as IstorkListener;
			if (typedListener != null) typedListener.ExitValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstorkVisitor<TResult> typedVisitor = visitor as IstorkVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_value);
		try {
			State = 114;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,10,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 108; Match(INTEGER);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 109; Match(FLOAT);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 110; Match(BOOLEAN);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 111; Match(STRING);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 112; object_reference();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 113; stat_functionCall();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamsContext : ParserRuleContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(storkParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(storkParser.COMMA, i);
		}
		public ParamsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_params; } }
		public override void EnterRule(IParseTreeListener listener) {
			IstorkListener typedListener = listener as IstorkListener;
			if (typedListener != null) typedListener.EnterParams(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IstorkListener typedListener = listener as IstorkListener;
			if (typedListener != null) typedListener.ExitParams(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstorkVisitor<TResult> typedVisitor = visitor as IstorkVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParams(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamsContext @params() {
		ParamsContext _localctx = new ParamsContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_params);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 121;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,11,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 116; expr(0);
					State = 117; Match(COMMA);
					}
					} 
				}
				State = 123;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,11,_ctx);
			}
			State = 124; expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncdefparamsContext : ParserRuleContext {
		public ITerminalNode[] IDENTIFIER() { return GetTokens(storkParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(storkParser.IDENTIFIER, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(storkParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(storkParser.COMMA, i);
		}
		public FuncdefparamsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcdefparams; } }
		public override void EnterRule(IParseTreeListener listener) {
			IstorkListener typedListener = listener as IstorkListener;
			if (typedListener != null) typedListener.EnterFuncdefparams(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IstorkListener typedListener = listener as IstorkListener;
			if (typedListener != null) typedListener.ExitFuncdefparams(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstorkVisitor<TResult> typedVisitor = visitor as IstorkVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncdefparams(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncdefparamsContext funcdefparams() {
		FuncdefparamsContext _localctx = new FuncdefparamsContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_funcdefparams);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 131;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,12,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 126; Match(IDENTIFIER);
					State = 127; Match(IDENTIFIER);
					State = 128; Match(COMMA);
					}
					} 
				}
				State = 133;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,12,_ctx);
			}
			State = 134; Match(IDENTIFIER);
			State = 135; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorContext : ParserRuleContext {
		public ITerminalNode ADD_OP() { return GetToken(storkParser.ADD_OP, 0); }
		public ITerminalNode TAKE_OP() { return GetToken(storkParser.TAKE_OP, 0); }
		public ITerminalNode MUL_OP() { return GetToken(storkParser.MUL_OP, 0); }
		public ITerminalNode DIV_OP() { return GetToken(storkParser.DIV_OP, 0); }
		public OperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IstorkListener typedListener = listener as IstorkListener;
			if (typedListener != null) typedListener.EnterOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IstorkListener typedListener = listener as IstorkListener;
			if (typedListener != null) typedListener.ExitOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstorkVisitor<TResult> typedVisitor = visitor as IstorkVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorContext @operator() {
		OperatorContext _localctx = new OperatorContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 137;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD_OP) | (1L << TAKE_OP) | (1L << MUL_OP) | (1L << DIV_OP))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Postfix_opContext : ParserRuleContext {
		public ITerminalNode INCREMENT_POSTFIX_OP() { return GetToken(storkParser.INCREMENT_POSTFIX_OP, 0); }
		public ITerminalNode DECREMEMT_POSTFIX_OP() { return GetToken(storkParser.DECREMEMT_POSTFIX_OP, 0); }
		public Postfix_opContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postfix_op; } }
		public override void EnterRule(IParseTreeListener listener) {
			IstorkListener typedListener = listener as IstorkListener;
			if (typedListener != null) typedListener.EnterPostfix_op(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IstorkListener typedListener = listener as IstorkListener;
			if (typedListener != null) typedListener.ExitPostfix_op(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IstorkVisitor<TResult> typedVisitor = visitor as IstorkVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostfix_op(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Postfix_opContext postfix_op() {
		Postfix_opContext _localctx = new Postfix_opContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_postfix_op);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 139;
			_la = _input.La(1);
			if ( !(_la==INCREMENT_POSTFIX_OP || _la==DECREMEMT_POSTFIX_OP) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 3: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 2);

		case 1: return Precpred(_ctx, 1);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3#\x90\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x3\x2\x3"+
		"\x2\x3\x2\x3\x3\a\x3#\n\x3\f\x3\xE\x3&\v\x3\x3\x4\x3\x4\x3\x4\x3\x4\x5"+
		"\x4,\n\x4\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x5\x5\x36\n"+
		"\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\a\x5>\n\x5\f\x5\xE\x5\x41\v\x5"+
		"\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\a\x3\a\x3\a\x3\a\x3\b\x3\b\x3\b\x5\b"+
		"O\n\b\x3\b\x3\b\x3\t\x3\t\x3\t\x3\t\x5\tW\n\t\x3\t\x3\t\x3\t\a\t\\\n\t"+
		"\f\t\xE\t_\v\t\x3\t\x3\t\x3\n\x3\n\x5\n\x65\n\n\x3\n\a\nh\n\n\f\n\xE\n"+
		"k\v\n\x3\n\x3\n\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x5\vu\n\v\x3\f\x3\f\x3\f"+
		"\a\fz\n\f\f\f\xE\f}\v\f\x3\f\x3\f\x3\r\x3\r\x3\r\a\r\x84\n\r\f\r\xE\r"+
		"\x87\v\r\x3\r\x3\r\x3\r\x3\xE\x3\xE\x3\xF\x3\xF\x3\xF\x2\x2\x3\b\x10\x2"+
		"\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2"+
		"\x1A\x2\x1C\x2\x2\x4\x3\x2\a\n\x4\x2\x10\x10##\x94\x2\x1E\x3\x2\x2\x2"+
		"\x4$\x3\x2\x2\x2\x6+\x3\x2\x2\x2\b\x35\x3\x2\x2\x2\n\x42\x3\x2\x2\x2\f"+
		"G\x3\x2\x2\x2\xEK\x3\x2\x2\x2\x10R\x3\x2\x2\x2\x12i\x3\x2\x2\x2\x14t\x3"+
		"\x2\x2\x2\x16{\x3\x2\x2\x2\x18\x85\x3\x2\x2\x2\x1A\x8B\x3\x2\x2\x2\x1C"+
		"\x8D\x3\x2\x2\x2\x1E\x1F\x5\x4\x3\x2\x1F \a\x2\x2\x3 \x3\x3\x2\x2\x2!"+
		"#\x5\x6\x4\x2\"!\x3\x2\x2\x2#&\x3\x2\x2\x2$\"\x3\x2\x2\x2$%\x3\x2\x2\x2"+
		"%\x5\x3\x2\x2\x2&$\x3\x2\x2\x2\',\x5\n\x6\x2(,\x5\f\a\x2),\x5\xE\b\x2"+
		"*,\x5\x10\t\x2+\'\x3\x2\x2\x2+(\x3\x2\x2\x2+)\x3\x2\x2\x2+*\x3\x2\x2\x2"+
		",-\x3\x2\x2\x2-.\a\x15\x2\x2.\a\x3\x2\x2\x2/\x30\b\x5\x1\x2\x30\x36\x5"+
		"\x14\v\x2\x31\x32\a\x18\x2\x2\x32\x33\x5\x14\v\x2\x33\x34\a\x19\x2\x2"+
		"\x34\x36\x3\x2\x2\x2\x35/\x3\x2\x2\x2\x35\x31\x3\x2\x2\x2\x36?\x3\x2\x2"+
		"\x2\x37\x38\f\x4\x2\x2\x38\x39\x5\x1A\xE\x2\x39:\x5\b\x5\x5:>\x3\x2\x2"+
		"\x2;<\f\x3\x2\x2<>\x5\x1C\xF\x2=\x37\x3\x2\x2\x2=;\x3\x2\x2\x2>\x41\x3"+
		"\x2\x2\x2?=\x3\x2\x2\x2?@\x3\x2\x2\x2@\t\x3\x2\x2\x2\x41?\x3\x2\x2\x2"+
		"\x42\x43\a \x2\x2\x43\x44\a \x2\x2\x44\x45\a\x1C\x2\x2\x45\x46\x5\b\x5"+
		"\x2\x46\v\x3\x2\x2\x2GH\a \x2\x2HI\a\x1C\x2\x2IJ\x5\b\x5\x2J\r\x3\x2\x2"+
		"\x2KL\a \x2\x2LN\a\x18\x2\x2MO\x5\x16\f\x2NM\x3\x2\x2\x2NO\x3\x2\x2\x2"+
		"OP\x3\x2\x2\x2PQ\a\x19\x2\x2Q\xF\x3\x2\x2\x2RS\a\x1D\x2\x2ST\a \x2\x2"+
		"TV\a\x18\x2\x2UW\x5\x18\r\x2VU\x3\x2\x2\x2VW\x3\x2\x2\x2WX\x3\x2\x2\x2"+
		"XY\a\x19\x2\x2Y]\a\x1A\x2\x2Z\\\x5\x6\x4\x2[Z\x3\x2\x2\x2\\_\x3\x2\x2"+
		"\x2][\x3\x2\x2\x2]^\x3\x2\x2\x2^`\x3\x2\x2\x2_]\x3\x2\x2\x2`\x61\a\x1B"+
		"\x2\x2\x61\x11\x3\x2\x2\x2\x62\x65\a \x2\x2\x63\x65\x5\xE\b\x2\x64\x62"+
		"\x3\x2\x2\x2\x64\x63\x3\x2\x2\x2\x65\x66\x3\x2\x2\x2\x66h\a\x14\x2\x2"+
		"g\x64\x3\x2\x2\x2hk\x3\x2\x2\x2ig\x3\x2\x2\x2ij\x3\x2\x2\x2jl\x3\x2\x2"+
		"\x2ki\x3\x2\x2\x2lm\a \x2\x2m\x13\x3\x2\x2\x2nu\a\x3\x2\x2ou\a\x4\x2\x2"+
		"pu\a\x5\x2\x2qu\a\x6\x2\x2ru\x5\x12\n\x2su\x5\xE\b\x2tn\x3\x2\x2\x2to"+
		"\x3\x2\x2\x2tp\x3\x2\x2\x2tq\x3\x2\x2\x2tr\x3\x2\x2\x2ts\x3\x2\x2\x2u"+
		"\x15\x3\x2\x2\x2vw\x5\b\x5\x2wx\a\x16\x2\x2xz\x3\x2\x2\x2yv\x3\x2\x2\x2"+
		"z}\x3\x2\x2\x2{y\x3\x2\x2\x2{|\x3\x2\x2\x2|~\x3\x2\x2\x2}{\x3\x2\x2\x2"+
		"~\x7F\x5\b\x5\x2\x7F\x17\x3\x2\x2\x2\x80\x81\a \x2\x2\x81\x82\a \x2\x2"+
		"\x82\x84\a\x16\x2\x2\x83\x80\x3\x2\x2\x2\x84\x87\x3\x2\x2\x2\x85\x83\x3"+
		"\x2\x2\x2\x85\x86\x3\x2\x2\x2\x86\x88\x3\x2\x2\x2\x87\x85\x3\x2\x2\x2"+
		"\x88\x89\a \x2\x2\x89\x8A\a \x2\x2\x8A\x19\x3\x2\x2\x2\x8B\x8C\t\x2\x2"+
		"\x2\x8C\x1B\x3\x2\x2\x2\x8D\x8E\t\x3\x2\x2\x8E\x1D\x3\x2\x2\x2\xF$+\x35"+
		"=?NV]\x64it{\x85";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace stork
